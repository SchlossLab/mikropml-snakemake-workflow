import os
import itertools as it
import pandas as pd
from snakemake.utils import Paramspace

configfile: "config/default.yml"

MEM_PER_GB = 1024

dataset_filename = config['dataset_csv']
dataset = config["dataset_name"]
ncores = config["ncores"]
ml_methods = config["ml_methods"]
kfold = config["kfold"]
outcome_colname = config["outcome_colname"]

nseeds = config["nseeds"]
start_seed = 100
seeds = range(start_seed, start_seed + nseeds)

hyperparams = config["hyperparams"] if "hyperparams" in config else None
find_feature_importance = config["find_feature_importance"]

ignore_keys = ['dataset_csv', 'ncores', 'nseeds', 'find_feature_importance', 'hyperparams']
for k in ignore_keys:
    config.pop(k, None)
config['seed'] = list(seeds)
conf_lists = {k:v for k,v in config.items() if type(v) == list}
params_df = pd.DataFrame(list(it.product(*[v for v in conf_lists.values()])), columns = conf_lists.keys())
for k in conf_lists.keys():
    config.pop(k)
for k, v in config.items():
    params_df[k] = v

paramspace = Paramspace(params_df, param_sep = "-")
print('paramspace.wildcard_pattern:\t', paramspace.wildcard_pattern)
print('paramspace.instance_patterns:\t', [i for i in paramspace.instance_patterns])

wildcard_constraints:
    kfold = '[0-9]+'

include: "rules/learn.smk"
include: "rules/combine.smk"
include: "rules/plot.smk"
include: "rules/example-report.smk"


rule targets:
    input:
        f"report_{dataset}.md",


rule render_report:
    input:
        R="workflow/scripts/render.R",
        Rmd="report.Rmd",
        perf_plot=rules.plot_performance.output.plot,
        feat_plot=rules.plot_feature_importance.output.plot,
        hp_plot=expand(
            "figures/{{dataset}}/hp_performance_{method}.png", method=ml_methods
        ),
        bench_plot=rules.plot_benchmarks.output.plot,
    output:
        doc="report_{dataset}.md",
    log:
        "log/{dataset}/render_report.txt",
    params:
        dataset=dataset,
        nseeds=nseeds,
        ml_methods=ml_methods,
        ncores=ncores,
        kfold=kfold,
    conda:
        "envs/mikropml.yml"
    script:
        "scripts/render.R"
