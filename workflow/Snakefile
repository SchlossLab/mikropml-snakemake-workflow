import datetime
import itertools as it
import os
import pandas as pd
from snakemake.utils import Paramspace,  min_version
import sys


min_version("6.12.3")


containerized: "docker://kellysovacool/mikropml:latest"


default_configfile = "config/config.yaml"


configfile: default_configfile


args = sys.argv
config_path = (
    args[args.index("--configfile") + 1]
    if "--configfile" in args
    else default_configfile
)

MEM_PER_GB = 1024

dataset = config["dataset"]
ncores = config["ncores"]
ml_methods = config["ml_method"]
kfold = config["kfold"]
outcome_colname = config["outcome_colname"]

nseeds = config["nseeds"]
start_seed = 100
seeds = range(start_seed, start_seed + nseeds)

hyperparams = config["hyperparams"] if "hyperparams" in config else None
find_feature_importance = config["find_feature_importance"]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Prepare Parameter Space
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
ignore_keys = ['dataset_csv', 'outcome_colname', 'ncores', 'nseeds', 'find_feature_importance', 'hyperparams']
for k in ignore_keys:
    config.pop(k, None)
config['seed'] = list(seeds)
conf_lists = {k:v for k,v in config.items() if type(v) == list}
params_df = pd.DataFrame(list(it.product(*[v for v in conf_lists.values()])), columns = conf_lists.keys())
for k in conf_lists.keys():
    config.pop(k)
for k, v in config.items():
    params_df[k] = v

params_df = params_df[sorted(params_df.columns.tolist())]
paramspace = Paramspace(params_df, param_sep = "-")
paramspace_tame_seed = re.sub("{((?!seed)[a-zA-Z_0-9]*)}", "{{\\1}}", paramspace.wildcard_pattern)
paramspace_no_seed = re.sub("/seed-{seed}/", "/", paramspace.wildcard_pattern)
print(paramspace.wildcard_pattern)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

wildcard_constraints:
    kfold = '[0-9]+'

include: "rules/learn.smk"
include: "rules/combine.smk"
include: "rules/plot.smk"
#include: "rules/example-report.smk"


report: "report/workflow.rst"


rule targets:
    input:
        f"workflow-{dataset}.zip",


rule render_report:
    input:
        perf_plot=rules.plot_performance.output.plot,
        feat_plot=rules.plot_feature_importance.output.plot,
        # hp_plot=expand(
        #     rules.plot_hp_performance.output.plot, ml_method=ml_methods
        # ),
        bench_plot=rules.plot_benchmarks.output.plot,
        roc_plot=rules.plot_roc_curves.output.plot,
        rulegraph="figures/graphviz/rulegraph.png",
    output:
        html="report_{dataset}.html",
    log:
        "log/{dataset}/render_report.txt",
    params:
        dataset=dataset,
        nseeds=nseeds,
        ml_methods=ml_methods,
        ncores=ncores,
        kfold=kfold,
        find_feature_importance=find_feature_importance,
        config_path=config_path,
    conda:
        "envs/mikropml.yml"
    script:
        "scripts/report.Rmd"


rule archive:
    input:
        rules.render_report.input,
        rules.render_report.output,
        expand(
            "results/{rtype}-results.csv",
            rtype=["performance", "feature_importance", "benchmarks", "sensspec"],
        ),
    output:
        "workflow-{dataset}.zip",
    log:
        "log/archive_{dataset}.txt",
    conda:
        "envs/smk.yml"
    shell:
        """
        zip -r {output} {input} 2> {log}
        """
