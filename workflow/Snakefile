import datetime
import os
from snakemake.utils import min_version
import sys


min_version("6.12.3")


containerized: "docker://kellysovacool/mikropml:latest"


default_configfile = "config/config.yaml"

MEM_PER_GB = 1024


configfile: default_configfile


wildcard_constraints:
    kfold="[0-9]+",


report: "report/workflow.rst"


include: "scripts/functions.py"
include: "rules/config.smk"
include: "rules/learn.smk"
include: "rules/combine.smk"
include: "rules/plot.smk"
include: "rules/example-report.smk"


results_types = ["performance", "benchmarks", "sensspec"]
if find_feature_importance:
    results_types.append("feature_importance")


rule targets:
    input:
        f"report_{dataset}.html",


rule render_report:
    input:
        perf_plot=rules.plot_performance.output.plot,
        feat_plot="figures/dataset-{dataset}/feature_importance.png",
        hp_plot=expand(
            "figures/{params}/hp_performance.png",
            params=instances_drop_wildcard(paramspace, "seed"),
        ),
        bench_plot=rules.plot_benchmarks.output.plot,
        roc_plot=rules.plot_roc_curves.output.plot,
        rulegraph="figures/graphviz/rulegraph.png",
    output:
        html="report_{dataset}.html",
    log:
        "log/{dataset}/render_report.txt",
    params:
        dataset=dataset,
        nseeds=nseeds,
        ml_methods=ml_methods,
        ncores=ncores,
        kfold=kfold,
        find_feature_importance=find_feature_importance,
        config_path=config_path,
    conda:
        "envs/mikropml.yml"
    script:
        "scripts/report.Rmd"


# TODO: switch this back to a `run` directive when snakemake fixes https://github.com/snakemake/snakemake/issues/2035
rule write_paramspace:
    output:
        csv="config/paramspace.csv",
    log:
        "log/write_paramspace.txt",
    params:
        df=paramspace.dataframe,
    conda:
        "envs/smk.yml"
    script:
        "scripts/write_paramspace.py"


rule archive:
    input:
        expand(rules.render_report.input, dataset=dataset),
        expand(rules.render_report.output, dataset=dataset),
        expand(
            "results/dataset-{dataset}/{rtype}-results.csv",
            rtype=results_types,
            dataset=dataset,
        ),
        rules.write_paramspace.output,
        config_path,
    output:
        f"workflow_{dataset}.zip",
    log:
        f"log/archive_{dataset}.txt",
    conda:
        "envs/smk.yml"
    shell:
        """
        zip -r {output} {input} 2> {log}
        """
